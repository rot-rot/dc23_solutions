

from Crypto.Cipher import ARC4
import sys

def rc4Crack(ct1,ct2,pt):
  return "".join(chr(ord(ct1[i]) ^ ord(ct2[i]) ^ ord(pt[i])) for i in range(0,min(len(ct1),len(ct2),len(pt))))



pid85 = "\x1b\xc0,\xa6\x06\xe8C'^\x96\xdc\xd9\x1c\xfb=\x19~\x85\xd1\x9b\x9aVhtS\xf03\xbfv\xc5\x1c0\xa2\xa9\xff\xb7\xac\x9b\xb1w\\\x84\xfd\x8a\xf4\xc1\xa1)\xcc\x15\x11PS\xfb0N\nA\xf6\xab\x86;\xed-\xf3\xdf\xa3\xa7/d\x16\xdd\x10V\xb5He5_\n\xdd\x8cD\xdf \x99\xcbEs\x1b.\xc9\xe2\x11{\xdb\x95x;~,\xf5\x97l\xa8w8a\xf9..\xc9\x96Q\xcb\xa2\x93\xe5'\xf5\xe2\t\xe8.\xee\xf9s\xf6\xbf\xa1\xe7\xc2I\xd7\xb6}\xe5\x07\xcd\x1d\xe0\xd4\x90\xcb\xf1[D[\xd0\x98\t\xef\t_\xec\x10\x03\xde\xed~\xe3D\xd7\xa5\xca\xe4\x1fz\x0e\x84\xccP\x1f\xed\xe2j"
pid84 = '\x1b\xc0,\x86\xb4\xdfCgQ\x86\xdc\xd9-\xd5\xddm\x0f\xb2\xed\xf8\xcf\x13\x9f\x0c7EB\xe0\xdf3\xc9\x86{\xb3\x023.\x9b\xb0w\\\x84Wc\xf6\xeaC\xc32\xbf\xf9s\xc1\xc2[+\x88"l\xe0W&K\xf9y\xb7J1g\x00\xa7\xfa\x9e\xae-\'\xa1\xbe\xa3\xad\xd4\xe3J\xb6\xa6\xf7\'\x8c\x85\xdf\xec\xc6a2\x15N!\\$\x12a]a\xef\\\xad\xbeL\x1ac\x86t\xe2\x8b\x9c\x14\x11\xc7|\xb8?\xe7"\xfc\x86\xd4\xa0j\x97qT\xe6U:\x88b7%i\xd4\xc3f\xab\xc7\xbd\x1b\xcf\xf2u\x05\x9f*\xa6\xfa(S\x15AYaJ\xa6\x13\xdd\xeb\x88[ \x110{.g\xbb%\xc4\x8c\x0b(6\x906\x16\xe7'


pid84_last = '\xb5\xb50\xbe\x08\xba\xab\x1c\x8d=9\xd9\x85w?\xb2\xa4\x12Y\xa1\xdaQ\xbb\xd94\xbb\xb8l\xda\x04\xcd\x88d`\x89\xf1\xfd\xa3f\x02\x03\x80\xa9\xb1\x8b)7\x98\xb5k\x9a\xe8Q2<%\x1d\xa7\xf1\xbfkz\x08`0Ux\xf8\xc8\xa9\x19\xf9\xce_\xf3\xa4\xb0\xbd\x91tc\\=k-\xab\x8b\xe9\xf1\xe6\x14\x15\xe9\xe2D7\xd54,\xbcU\xca\xce\xf6\xf5gx\x91\x11\x04\xf1\xbbO\xc5\x8d\x80n\xbe\xef\xd0\x03\x83\xb0\xd3k\x87\xa9\x9a\xbb\xd3\xcc-\x86Mk\xab\x88\xf1\x91\xf2)2[\xb4_+\xe5\xfa\x07J\xd6I?\x80+&\x1a+\x04a\xeb\xc8\x8b\x86\xab&\x92i^\x0f\xf25\xa1@\x07_"\xe4_\xf2\xca4\\\xff'
pid85_last = '\x80\xd9~l\xd4Uz\xf9\xf6\x81\xa2\xfaN\\\xc1\xcb\t\xe2Q\xb1\xd1\xa5\xb9\x7fP\x1at\x01\x03\xa9\r\xaeuU,\xe7qf\xbc\xd3]X;\x1c=\xa1\xc5\xb2D\xbf\xb7\xf2\x01\xa96;\xde\xcag\xb7\x94\x91(\xab2\xd9N\xdch\xc906M\xa5'


pid85_corlast = '\xaf\x82\xf9\x1e\x12\x9f\xc9\xc7e=#\xbar\x01\x7f\xc5\x0bq\xe8cZ\x97\xef\xad\xd4\xbc4"\xea|"q\xd1rM\xcdp\x06\xd5\x1e\xd7I\xa8?\x186C\xea\xc0\x90\xc0\x1b\x1c\xf4H\xd8\xce\xaf\xf6t\xc7\xea\x9di\x87\xd1\x0e\x83(\xcczw`\xa6\xd4\x97\xf4\x98\xedH\x8e&9\x9b\xae\xb5<\xbb\x99p\x05\xeb{\xb6\x83\xde\x18h\xe8(\x03\xa8T\xb5\xc8\xd7J\x91\xf8\x12nG6\xa8\x87\xd7\x1e\x93\xd6\x13\xb6\xf4X[\xf4`\xf9\x03\x14\xc98H\xf8\xbe\'\xad\xd3:\xa7\x0e~Ek=\\m*R\xa5?\xe0h\xb0(a\xbd\x94-:~\xab\rR\x9c\xa0\xabxx\xff\xf8%\xeflsf\xd6\xce\xe3\x07Ga\xff]\r'


#v =  rc4Crack(pid84_last,pid85_corlast,"\x")
#print repr(v)

#sys.exit(0)


def rc4crypt(data, key):
    x = 0
    box = range(256)
    for i in range(256):
        x = (x + box[i] + ord(key[i % len(key)])) % 256
        box[i], box[x] = box[x], box[i]
    #print box
    x = 0
    y = 0
    out = []
    for char in data:
        x = (x + 1) % 256
        y = (y + box[x]) % 256
        box[x], box[y] = box[y], box[x]
        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))
    
    return ''.join(out)

key = "\x00\x00\x00TEST\x99\xf1\xa4\xcc"
cipher = ARC4.new(key)
print repr(cipher.encrypt("THIS IS A TEST MESSAGE"))
print repr(rc4crypt("THIS IS A TEST MESSAGE",key))

for i in range(0,10):
  print repr(rc4crypt("\x00\x00"+chr(i)+"THEKEY!!","MYSECRETMESSAGE"))

cipher = ARC4.new(key)
print repr(cipher.encrypt("THIS IS ANOTHER TEST MESSAGE"))



"""
Hello friend, welcome to our state of the art crypto challenge.
The second video channel is enciphered with RC4.
The key is 64 bits long and prepended with a 24bit IV.
The IV is big endian, starts at zero and increments by one after every transport packet for a given PID
"""


GOGO_DECODE = True

#key = [174,169,183,153,101,241,17,190]
key = [213, 72, 220, 54, 16, 135, 113, 227]




raw = ""


with open("C:\\Users\\Kevin\\Downloads\\flag.drm.mpg",'rb') as f:
  raw = f.read()

ff = None
if GOGO_DECODE:
  ff = open("C:\\Users\\Kevin\\Downloads\\drm.out.mpg","wb")

print len(raw)

PIDS = {}
P_LENGTH = 188
payloads = []
for i in range(0,len(raw)/P_LENGTH):
  pstart = i*P_LENGTH

  packet = raw[pstart:pstart+P_LENGTH]
  
  sync_byte = packet[0]
  tei = ord(packet[1]) & 0x80
  pusi = ord(packet[1]) & 0x40
  tp = ord(packet[1]) & 0x20
  PID = ((ord(packet[1]) & 0x1f) << 8) + (ord(packet[2]) & 0xff)
  sc = ord(packet[3]) & 0xC0
  ad_e = ord(packet[3]) & 0x20
  haspayload = ord(packet[3]) & 0x10
  counter = ord(packet[3]) & 0xf
  #print PID,counter
  idx = 4

  if ad_e != 0:
    idx += ord(packet[4]) + 1

  #PROGRAM ASSOCIATION TABLE
  if haspayload and PID == 0:
    tbl_id = ord(packet[idx])
    tid = (ord(packet[idx+3]) << 8) + ord(packet[idx+4])
    
    #print tbl_id, tid
  
  payload = ""
  if haspayload:
    payload = packet[idx:]
  #print sync_byte, tei, pusi, tp, PID

  if not PID in PIDS:
    PIDS[PID] = [payload]
  else:
    PIDS[PID].append(payload)

  #if len(PIDS[PID]) == 212741:
  #  print PID,"[",212741,"]"
  #  print repr(PIDS[PID][-1])

  if GOGO_DECODE:
    if PID == 84 or PID == 85:
      rr = len(PIDS[PID])-1
      p1 = payload

      IV = [0,0,0]
      IV[0] = (rr & 0xff0000) >> 16
      IV[1] = (rr & 0xff00) >> 8
      IV[2] = (rr & 0xff)

      x = rc4crypt(payload,"".join(chr(x) for x in IV + key))
      
      ff.write(packet[:idx] + x)

    else:
      ff.write(packet)
      #ff.write(packet[:idx] + ("\x00" * (P_LENGTH - idx)))



if GOGO_DECODE:
  ff.close()

  sys.exit(0)


for n in PIDS:
  print n,len(PIDS[n])

for n in PIDS:
  for k in range(0,100):
    print n,k,repr(PIDS[n][k][:20])





# PID 68, 84: every 4 packets begins with \x00\x00\x01\xc0\x02\xa8\x80...
"""
0 101
66 101
68 3365
69 44933
82 6376
84 212741
85 2797631
"""

## Find the Key
pid = 85
IV = [0] * 3 # 24 bit IV
secret = [] #153 or 242, 101 or 249, [17,33,79,97,156,247]
N = 256
ret = {}
for rr in range(0,len(PIDS[pid])):
  O = PIDS[pid][rr]
  IV[0] = (rr & 0xff0000) >> 16
  IV[1] = (rr & 0xff00) >> 8
  IV[2] = (rr & 0xff)

  K = IV + secret
  # A + 3 = len(K) (IV = K[0:3]
  if IV[0] == len(K) and IV[1] == N - 1:
    S = range(0,N)

    j = 0
    i = 0
    while i < len(K):

      j = (j + S[i] + K[i % len(K)]) % N

      S[i],S[j] = S[j],S[i]
      #print i,j,S
      
      i += 1

    #if S[1] < len(IV) and (S[1] + S[S[1]]) % N == len(K):

    #Calculate S^(-1)_(I+B-1)[OUT]
    nnn = 0
    for kkk in range(0,len(S)):
      if S[kkk] == ord(O[0]):
        nnn = kkk
        break
    print j,nnn,S[0:10],[ord(x) for x in O[0:10]]
    v = ((nnn - j - S[len(K)]) % N) 
    if v in ret:
      ret[v] += 1
    else:
      ret[v] = 1


  """
  #PRGA
  i = 0
  j = 0
  out = ""
  while i < len(K) + 1:
    i = (i + 1) % N
    j = (j + S[i]) % N

    S[i],S[j] = S[j],S[i]
    out += chr(S[(S[i] + S[j]) % N])
  print "PRGA:",[ord(x) for x in out]
  """
    

      


m = max([ret[x] for x in ret])
print ret
print "Max:",m
print [x for x in ret if ret[x] == m]
    
  
  



"""
0 0 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 1 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 2 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 3 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 4 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 5 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 6 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 7 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 8 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 9 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 10 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 11 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 12 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 13 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 14 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 15 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 16 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 17 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 18 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
0 19 '\x00\x00\xb0\x11\xdeL\xeb\x00\x00\x00\x01\xe0B\x00\x02\xe0R8\xc3\x9b'
66 0 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 1 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 2 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 3 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 4 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 5 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 6 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 7 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 8 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 9 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 10 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 11 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 12 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 13 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 14 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 15 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 16 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 17 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 18 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
66 19 '\x00\x02\xb0#\x00\x01\xc3\x00\x00\xe0E\xf0\x00\x03\xe0D\xf0\x06\n\x04'
68 0 '\x00\x00\x01\xc0\x02\xa8\x80\x80\x05/\x86\xbf\x1e=\xff\xfc\xb4\x00\xf2\xeb'
68 1 '\xbb\xbb\xbb\xbb\xbb\xbb\xad\x8bb\xd8\xdbk_}\xa7\xdfi\xf6\x16}'
68 2 '2E\xda\xb7\xb5k\xac:\xc2\xa3\xaa;\xcb<\xb4\xe8\xce\x8a\xda\xb6'
68 3 '$.\xc9\x0b\xad\x95\x03eA=jOZ\x8cKX\x96\xe1^\x15'
68 4 '\x00\x00\x01\xc0\x02\xa8\x80\x80\x05/\x86\xbf/\x1d\xff\xfc\xb4\x00=;'
68 5 '\xa1\x8d\x83a\x9dY\xd6S\x04\xa6\nE\xa4Rh\x9a\x90\xf9\xf4\x87'
68 6 ')\xcfc\x9e\xc6\xc9\xcd\x93\x9d]\xd5\xdb\xe6\xfa\x99)\x92/\xac_'
68 7 '\xb5\xeb\x87\xd7\r\x9d\xd9\xdd7SvM\\\x9a\xbe&\xdcM\x94\xb5'
68 8 '\x00\x00\x01\xc0\x02\xa8\x80\x80\x05/\x86\xbf?\xfd\xff\xfc\xb4\x00\xdb\xd4'
68 9 '\x9d#H\xdc\xbfB\xe5\xfa\x1b\x92\x05]\x18\xaf\x83_\x06\xb6\x08l'
68 10 '\x97\xa9S\r0\xe4\xd95\x0e\xa2\x1dH\xbc\xf1y\xcd3M3)'
68 11 '\x91F"\x8ci\x16\x91\x88#\x10F\x96)bV\xa5i\x96\xd9n'
68 12 '\x00\x00\x01\xc0\x02\xa8\x80\x80\x05/\x86\xbfP\xdd\xff\xfc\xb4\x00h\x02'
68 13 'K\x9b6\xcd\x8cD\x99\x8a$\xcc^#<F;pv\xe0\tp'
68 14 '\x17e\xd9m[Q\xb4m\x8cS\x18\xa8\xceQ\x9c\xa4\xd96\x10_'
68 15 '\x03\xae\x07^\xa0\xcdA\x94\x99)2e\xb2[\x0b\xf2\xfe\x13\x84\xd5'
68 16 '\x00\x00\x01\xc0\x02\xa8\x80\x80\x05/\x86\xbfa\xbd\xff\xfc\xb4\x003\x89'
68 17 '\xe5\\\xe79\xceXu\x87\x94](\xba-|Z\xf6\xc5\xcd\x8b\x95'
68 18 'C\xb3\xd1\xbd\x1c\x18\xd81\xac\xec\xce\xcb\x1bnIp"Ip!'
68 19 's\\\xf7\xb5\xefjj\x9a\xbbC\xb4L4\xc3C\xb4;43C'
69 0 '\x00\x00\x01\xe0\xb0\x8d\x80\xc0\n?\x86\xbfM+\x1f\x86\xbf\x06\xc9\x00'
69 1 '\x02\x17\xfcF\xd5\x9f\x95h\xdf\xc5k\x1aSk0\x0cmF\xcb\x94'
69 2 '\xe0\x10\x80x\x00\xfc\x00t\xdf\x16\x80\x84\x04\x11\xe0\x03\x16\xfb\x0c\x04'
69 3 "\xa8qm9\xa76\x9c\xc3r\xb6\xa8c3\xe1\xac\x00'0\x00t"
69 4 '\xf7\xb4\xdaT]\xadC\xe9\x88\xd9\xcb\xa3o=[\xce\xc8\xb5\xaf\xfb'
69 5 '\x05n\xba\x08@\x1fH\x80\x9b\xff\xadB\xb2\x80P\xa0\x03\x06\xc0\x03'
69 6 '\xff\xa8\xd9\xc0B\x00ry![P\x1c\x93\x89(\xdb\xec\xb0\x10\xbf'
69 7 "\x9c%+|\xd5\x01\x07\xf7p\x01\xa3\x810\x05<\x89\x08\xdf\x1d'"
69 8 '\x03\x9bT\xead\x8a\xc9\x7f\x0c\xfaR\xca\xc3e\xf2\x9bg\x81Lv'
69 9 '\xa4&x\x08@\x18\xf5_F\x8a\x00#\x91\x1b\x00C\x00\x94$\xb7'
69 10 '\x0eN$#h\xd1\xa3F\x0f\x8d\x076\x8d\x1a4\xa5VL\xc7\xb6'
69 11 '\xe4\x1bc\xad\tk\x88\xde\xfa\x01l7\x02\x19dV\xe1\x15\x86H'
69 12 '?\xfa\xf3\x00\x187}\x04 \x13\x00:\x04\xdf\xfc\x03\x80\xf6\xa1Y'
69 13 '\x06\xd0\x00f\xded\xf6\xf5\x14\x10\xbfn|\x12[0C\x00\x82\x0c'
69 14 '\x19\xd0\x00\xc1\x1b\xe9\x87\xe8\x90M\x00j\xf2B\xb7\xcd4\x10\xbfK'
69 15 'P\xebI\r\x9e\x94s8Sjj\x81\xb6\xaf0\xdezu%\xc6'
69 16 '[<\xc0\x010\x01\xe0\x1e\xda\xf8\x04/\xf1npC\x00\x83\t-'
69 17 '\x0c\x11\xb4h\xd1\xa3\r\r\xa3F\x95\xa3&\xa2kbMg\x00\x99'
69 18 '\xa0\xd6\x08P\xf6^\xf5Nl\x04@\x03\xc1Q\x1a\x89\xa3\x8c\x93\n'
69 19 '\x8b[\xd0\x00s\xf3(ncm\xf2\x06iC\x1b~F\x04\x0f\x8a'
82 0 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 1 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 2 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 3 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 4 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 5 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 6 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 7 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 8 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 9 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 10 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 11 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 12 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 13 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 14 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 15 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 16 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 17 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 18 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
82 19 '\x00\x02\xb0#\x00\x02\xc3\x00\x00\xe0U\xf0\x00\x03\xe0T\xf0\x06\n\x04'
84 0 '\x1b\xc0,\x86\xb4\xdfCgQ\x86\xdc\xd9-\xd5\xddm\x0f\xb2\xed\xf8'
84 1 'E\x90\xa7\xe5\xed3\xe1\x18s\xad\t\xcc-\x967\xb0\\Y\xf9\xf7'
84 2 '\x16\x15\xb4\n\xa5~\r=\x03[\xda\x9e\xac\x86_\xd2\x97\xcft\x19'
84 3 '\x00\x0b\xd2\xc0\xa0\xe3Q\x04\xd9O8\xc5\xdf>\xaeu\xed\x07\xfc\xb1'
84 4 ";\x1cL\x95m!\xc1'W\x16 D7q\xa5\x02+\x0c\\@"
84 5 '\x88aZ.s\xd6"\xe4\x94\x14 \xf5]\x89-T\xe9:Y?'
84 6 '\x84\xfc\xbe\xb2"P\xc4_\x80H\x99q\xe5E\xcf\xe4\xc1\x1a-\xec'
84 7 '!T\x85\xea/FP\x13^0\xfacF\xb1-\xc94:\xee4'
84 8 'X\xd6\xd4\xb7\xe8\xac\x86\xc2C\xd7\x126+R\x84\xbd\xb4\x96\xe5\x9a'
84 9 '\xe6\xdbm\xc6\x17j\xa6\xe0\x8e\x1b?VVU\xf5z\xdf\xc4\x1e"'
84 10 '\xa3\xe0RiWoOi\xc1qP\xb7\xf4\xd1\xcd\x9e\x1bv\xab\x0b'
84 11 '\xa5C.\x1fg\xf705\xc2\x86\x92\x93\xf5\x9f\xc5\x19\xbci_^'
84 12 '\x0b\xa3\x9cv\x1b\xeb2\xf2K\xa9!\x0f\xea^\xea\x02 \xe9\xed$'
84 13 '\xd6\xd4\xb6\x08\xe7,Y\x8a\x00U\xe6 \xd7\x9fb\n\xfd]S\xdd'
84 14 '\x12\xebwt\\P\xe75XBW\xe5j\x078\xea\xa6\xc8\xae\xa9'
84 15 '\xf6\xadJ\xd7\x88\xe5N\xd5\xff\xf3\x06\xf7\x9b\xd3\xc1\x81n\x12\x03*'
84 16 '\tl\x05\xfdO2Y\x8b\xdf\xb3\xd5\x82\xf5^\xee\xa1\xca1\xf9\x15'
84 17 '\xa5\xf29\xab\x8c\xf1\xd9-\x00\xb0,\xe3x\xac\x1e\xae\xf3\xda\xce\x80'
84 18 'G\x90\xc8lv\xf9_\x82\xeaZp\x9f\xb8\xeb\x86\xadM3\xa9\x17'
84 19 '\x07\x15`\xaa\xeb2\xdf\xe3\xf1A\x04Tu\x93$y\x83PR\xa7'
85 0 "\x1b\xc0,\xa6\x06\xe8C'^\x96\xdc\xd9\x1c\xfb=\x19~\x85\xd1\x9b"
85 1 '?\x90xi\x86A\xbe9z\xdf\xa9\xe3\xc4\xd2!sV\xdfN\xef'
85 2 't\xe2\x05\xa7rE\x9c\xf63\x92\xc1\xc1D-\xd8o\x13^\x93d'
85 3 '\xc1Q\xa8U~\xbf\x94\x05\xf9\xe7s\xb2\xe1E\xdd\xa4\x16h\x84\xf1'
85 4 '!-\x9b\xcf\xa4\xeaL\x01f\xff\xa5\x99\x9f\xe39\xe6-\xbd\xef\x8b'
85 5 '\xc7\x88\x83\xf3\x1d\xbf\xda\xc2\x0c+\xeb8g\xa0OK?7\xe6\xef'
85 6 '{"\x19\xaf\xb7\xe1\rP\x8eE\xf2qE\xbb\x13v\xdd\np\x97'
85 7 's]F\xday~E|Q`\xd1\xd4\x86\xd6\xa9w\xfbP\n\xb3'
85 8 'n\xfarD\xd8\x98\xc6LF\x0e\x81\xb5\xd7yO\xf1\xd9\x0ctw'
85 9 '\x18\x92q\xeb\x9d\xa5\x8c\xa0\x823m\xe6\xa9zO\x82\xe5\xc7\xba\xaa'
85 10 'q/\xf11\xe0\xf6\xb9\xe2\x89\x8e\x9f;j\x9e\xealt\x1e=@'
85 11 '\x11}\xcd\x9d\x05\x18\xb7\xfd\xc8\x7f\x9c\xee)\xfa\x1d\xc4\xaa\x90\xf6\xde'
85 12 'H\xed\xdf\xb0\x8f\x00\xd3\xc3<2\xdbz\x004;c\x961\xa27'
85 13 '9\xe0\x12\xa7\xbdF\xec\xd8\xfdT\xa8<\xa8\xff\xe6}7\xffE\xef'
85 14 '\xee\xa3\xe7\xde_\xeb\x08\xd5\x19\x04\xd4\\\xf3A\xa4)\x9e\xc3o\x81'
85 15 'K\xce*\x13*]\xa6\x12\xa6\xdf\xa8\xbcS\x8d\xa3ol\x96\xfc\x1a'
85 16 '\xcf\xaa\x1f{\xc0\xb6\x93\xdaY7P\xcc\xf2\x0b?m\xa6\xf7\xd9,'
85 17 "d9R\xa1\xba\xa0hd\xbb\xb9\xf1\xb2>\xb27-'\x10~t"
85 18 '\xe9mi\xfc7c%]\xdd&\xbf\xca\x0f;\x9a\xca\xcd\xf5\x1cP'
85 19 '\xc4\xaa\x8bl6\xb6lLCe\x1b\x87I\xb8\xf9\x19\x14\xd5\x0cr'
"""

